// <auto-generated />
using System;
using CoffeeShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.Migrations
{
    [DbContext(typeof(CoffeeShopDBContext))]
    partial class CoffeeShopDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShop.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("b3ca757d-f598-48a7-accc-2ecea9d75bd9"),
                            AccountPassword = "admin",
                            AccountUsername = "admin",
                            Role = 0
                        },
                        new
                        {
                            AccountId = new Guid("32441298-dcc0-4262-a2e8-4ed514c7d98c"),
                            AccountPassword = "1",
                            AccountUsername = "cashier",
                            Role = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("cfccc484-b52c-4755-87b7-6674ae199084"),
                            CategoryName = "Coffee"
                        },
                        new
                        {
                            CategoryId = new Guid("f6cdf913-ca5f-46d1-9970-5f5fe1d09190"),
                            CategoryName = "Tea"
                        },
                        new
                        {
                            CategoryId = new Guid("ba21fe7e-02bc-4cdf-8f50-23cf62ac1526"),
                            CategoryName = "Pastry"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecordId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CheckTimes");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CustomerBirthday")
                        .HasMaxLength(255)
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("6182c9c6-d3f1-4cf1-876b-71ca48b1ae50"),
                            CustomerBirthday = new DateTime(2024, 6, 10, 9, 47, 35, 502, DateTimeKind.Local).AddTicks(6410),
                            CustomerName = "Jane Smith",
                            CustomerPhone = "0934516636"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("EmployeeWorkingHour")
                        .HasColumnType("tinyint");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("fa82020c-63cf-46b6-821c-a22e9e1e888b"),
                            AccountId = new Guid("b3ca757d-f598-48a7-accc-2ecea9d75bd9"),
                            EmployeeName = "John The Boss",
                            EmployeePosition = "Owner",
                            EmployeeWorkingHour = (byte)10
                        },
                        new
                        {
                            EmployeeId = new Guid("3a7e6fcc-3e77-45b8-811b-cd9136e0b996"),
                            AccountId = new Guid("32441298-dcc0-4262-a2e8-4ed514c7d98c"),
                            EmployeeName = "Jane Cashier",
                            EmployeePosition = "Cashier",
                            EmployeeWorkingHour = (byte)10
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Property<Guid>("PayRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayrateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PayrateValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayRateId");

                    b.ToTable("PayRates");

                    b.HasData(
                        new
                        {
                            PayRateId = new Guid("d9d61f5c-0766-4ea2-87f8-d796c39dd102"),
                            PayrateName = "Hoc viec",
                            PayrateValue = 20000m
                        },
                        new
                        {
                            PayRateId = new Guid("c5f43c9c-8c96-4476-ad9f-30b8e423c782"),
                            PayrateName = "Junior",
                            PayrateValue = 25000m
                        },
                        new
                        {
                            PayRateId = new Guid("b425cc0e-f042-4dd7-b65d-bfae7a44e80d"),
                            PayrateName = "Senior",
                            PayrateValue = 30000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("e86ea75a-8130-4f4a-92ed-0cae63867694"),
                            CategoryId = new Guid("cfccc484-b52c-4755-87b7-6674ae199084"),
                            ProductDescription = "Coffee shot",
                            ProductName = "Espresso",
                            ProductPrice = 25000m
                        },
                        new
                        {
                            ProductId = new Guid("b5f3af44-bfe3-407b-8d4b-e62ee6b87cfc"),
                            CategoryId = new Guid("cfccc484-b52c-4755-87b7-6674ae199084"),
                            ProductDescription = "Milky coffee",
                            ProductName = "Cappuccino",
                            ProductPrice = 30000m
                        },
                        new
                        {
                            ProductId = new Guid("90d8ca42-c9b3-45e5-97b4-ac025c0cc57c"),
                            CategoryId = new Guid("f6cdf913-ca5f-46d1-9970-5f5fe1d09190"),
                            ProductDescription = "Green thing",
                            ProductName = "Green Tea",
                            ProductPrice = 15000m
                        },
                        new
                        {
                            ProductId = new Guid("42edc201-2ecf-454c-a18e-df3d0a48748a"),
                            CategoryId = new Guid("ba21fe7e-02bc-4cdf-8f50-23cf62ac1526"),
                            ProductDescription = "It's pronounced \"KhoaSoong\" ",
                            ProductName = "Croissant",
                            ProductPrice = 20000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductImageDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ProductImageId = new Guid("caa6c741-ab1b-4250-b819-07054ea4d2b1"),
                            ProductId = new Guid("e86ea75a-8130-4f4a-92ed-0cae63867694"),
                            ProductImageDescription = "Espresso coffee shot",
                            ProductImagePath = "https://cdn.tgdd.vn/Files/2023/07/11/1537842/espresso-la-gi-nguyen-tac-pha-espresso-dung-chuan-202307120715077669.jpg"
                        },
                        new
                        {
                            ProductImageId = new Guid("0b4eb839-2cb9-40d8-ae7c-af3bee8258a8"),
                            ProductId = new Guid("b5f3af44-bfe3-407b-8d4b-e62ee6b87cfc"),
                            ProductImageDescription = "Cappuccino with milk foam",
                            ProductImagePath = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Cappuccino_at_Sightglass_Coffee.jpg/1200px-Cappuccino_at_Sightglass_Coffee.jpg"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReceiptTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("3830a779-bc3a-4a78-bbde-8f181e21b932"),
                            CustomerId = new Guid("6182c9c6-d3f1-4cf1-876b-71ca48b1ae50"),
                            EmployeeId = new Guid("3a7e6fcc-3e77-45b8-811b-cd9136e0b996"),
                            ReceiptDate = new DateTime(2024, 6, 10, 9, 47, 35, 502, DateTimeKind.Local).AddTicks(6447),
                            ReceiptTotal = 70000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReceiptDetail");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("3830a779-bc3a-4a78-bbde-8f181e21b932"),
                            ProductId = new Guid("e86ea75a-8130-4f4a-92ed-0cae63867694"),
                            ProductPrice = 0m,
                            ProductQuantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("3830a779-bc3a-4a78-bbde-8f181e21b932"),
                            ProductId = new Guid("42edc201-2ecf-454c-a18e-df3d0a48748a"),
                            ProductPrice = 0m,
                            ProductQuantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.Property<Guid>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalSalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalaryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("PayrateId");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            SalaryId = new Guid("0bb8de08-2005-49bf-b26d-90413f666b58"),
                            EmployeeId = new Guid("3a7e6fcc-3e77-45b8-811b-cd9136e0b996"),
                            PayrateId = new Guid("d9d61f5c-0766-4ea2-87f8-d796c39dd102"),
                            TotalSalary = 250000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithMany("CheckTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.HasOne("CoffeeShop.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("CoffeeShop.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.HasOne("CoffeeShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoffeeShop.Models.ProductImage", b =>
                {
                    b.HasOne("CoffeeShop.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.HasOne("CoffeeShop.Models.Customer", "Customer")
                        .WithOne("Receipt")
                        .HasForeignKey("CoffeeShop.Models.Receipt", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithMany("Receipts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.HasOne("CoffeeShop.Models.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithOne("Salary")
                        .HasForeignKey("CoffeeShop.Models.Salary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.PayRate", "PayRate")
                        .WithMany("Salaries")
                        .HasForeignKey("PayrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayRate");
                });

            modelBuilder.Entity("CoffeeShop.Models.Account", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.Navigation("CheckTimes");

                    b.Navigation("Receipts");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
