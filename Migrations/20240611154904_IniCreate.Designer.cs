// <auto-generated />
using System;
using CoffeeShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.Migrations
{
    [DbContext(typeof(CoffeeShopDBContext))]
    [Migration("20240611154904_IniCreate")]
    partial class IniCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShop.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("78dd2fac-9cb6-424f-8a92-a4f8857f527e"),
                            AccountPassword = "admin",
                            AccountUsername = "admin",
                            IsDeleted = false,
                            Role = 0
                        },
                        new
                        {
                            AccountId = new Guid("973edf72-0a06-49c5-b630-d005583ba1ad"),
                            AccountPassword = "1",
                            AccountUsername = "cashier",
                            IsDeleted = false,
                            Role = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("d10594b0-1c6a-4a4f-bd62-aa670af7c7b2"),
                            CategoryName = "Coffee",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = new Guid("537503bf-adca-44e1-9a32-99bf05d2b2d9"),
                            CategoryName = "Tea",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = new Guid("4364fa40-5733-43a9-917a-3253d18b7e4b"),
                            CategoryName = "Pastry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RecordId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CheckTimes");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CustomerBirthday")
                        .HasMaxLength(255)
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("972ab33a-8295-4e32-b351-715359f7283c"),
                            CustomerBirthday = new DateTime(2024, 6, 11, 22, 49, 2, 53, DateTimeKind.Local).AddTicks(9399),
                            CustomerName = "Jane Smith",
                            CustomerPhone = "0934516636",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("EmployeeWorkingHour")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("042e72a4-b4b2-4b98-8297-557c7d5d0921"),
                            AccountId = new Guid("78dd2fac-9cb6-424f-8a92-a4f8857f527e"),
                            EmployeeName = "John The Boss",
                            EmployeePosition = "Owner",
                            EmployeeWorkingHour = (byte)10,
                            IsDeleted = false
                        },
                        new
                        {
                            EmployeeId = new Guid("8a5f677e-d77d-4c1e-b044-44ca391a1979"),
                            AccountId = new Guid("973edf72-0a06-49c5-b630-d005583ba1ad"),
                            EmployeeName = "Jane Cashier",
                            EmployeePosition = "Cashier",
                            EmployeeWorkingHour = (byte)10,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Property<Guid>("PayRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PayrateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PayrateValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayRateId");

                    b.ToTable("PayRates");

                    b.HasData(
                        new
                        {
                            PayRateId = new Guid("30b8d7b5-7dde-45a4-9060-7b064de7bddf"),
                            IsDeleted = false,
                            PayrateName = "Hoc viec",
                            PayrateValue = 20000m
                        },
                        new
                        {
                            PayRateId = new Guid("bdbd4de4-f13d-4e45-8fb7-7a88822e853f"),
                            IsDeleted = false,
                            PayrateName = "Junior",
                            PayrateValue = 25000m
                        },
                        new
                        {
                            PayRateId = new Guid("dc5135a8-9490-41bc-9aa0-8752c4986fa4"),
                            IsDeleted = false,
                            PayrateName = "Senior",
                            PayrateValue = 30000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("c9b3e98b-5612-4f26-a6b5-bd2d893e46e3"),
                            CategoryId = new Guid("d10594b0-1c6a-4a4f-bd62-aa670af7c7b2"),
                            IsDeleted = false,
                            ProductDescription = "Coffee shot",
                            ProductName = "Espresso",
                            ProductPrice = 25000m
                        },
                        new
                        {
                            ProductId = new Guid("275f9714-236e-457e-a5c5-39034a510d04"),
                            CategoryId = new Guid("d10594b0-1c6a-4a4f-bd62-aa670af7c7b2"),
                            IsDeleted = false,
                            ProductDescription = "Milky coffee",
                            ProductName = "Cappuccino",
                            ProductPrice = 30000m
                        },
                        new
                        {
                            ProductId = new Guid("8dd7a8c4-1c22-4b23-b0ca-a9cf1864f192"),
                            CategoryId = new Guid("537503bf-adca-44e1-9a32-99bf05d2b2d9"),
                            IsDeleted = false,
                            ProductDescription = "Green thing",
                            ProductName = "Green Tea",
                            ProductPrice = 15000m
                        },
                        new
                        {
                            ProductId = new Guid("6f8b6c6e-7d78-4ab3-950d-a4f6ed87f35e"),
                            CategoryId = new Guid("4364fa40-5733-43a9-917a-3253d18b7e4b"),
                            IsDeleted = false,
                            ProductDescription = "It's pronounced \"KhoaSoong\" ",
                            ProductName = "Croissant",
                            ProductPrice = 20000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductImageDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ProductImageId = new Guid("8e395b9f-bc9d-4956-95ef-8093a7fd797a"),
                            IsDeleted = false,
                            ProductId = new Guid("c9b3e98b-5612-4f26-a6b5-bd2d893e46e3"),
                            ProductImageDescription = "Espresso coffee shot",
                            ProductImagePath = "https://cdn.tgdd.vn/Files/2023/07/11/1537842/espresso-la-gi-nguyen-tac-pha-espresso-dung-chuan-202307120715077669.jpg"
                        },
                        new
                        {
                            ProductImageId = new Guid("4c9b4a27-577d-46ad-95d4-3c8f1a2e4b48"),
                            IsDeleted = false,
                            ProductId = new Guid("275f9714-236e-457e-a5c5-39034a510d04"),
                            ProductImageDescription = "Cappuccino with milk foam",
                            ProductImagePath = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Cappuccino_at_Sightglass_Coffee.jpg/1200px-Cappuccino_at_Sightglass_Coffee.jpg"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReceiptTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Table")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("5c51c26e-da45-4fa1-8298-ef58ce4c1ba8"),
                            CustomerId = new Guid("972ab33a-8295-4e32-b351-715359f7283c"),
                            EmployeeId = new Guid("8a5f677e-d77d-4c1e-b044-44ca391a1979"),
                            IsDeleted = false,
                            ReceiptDate = new DateTime(2024, 6, 11, 22, 49, 2, 53, DateTimeKind.Local).AddTicks(9436),
                            ReceiptTotal = 70000m,
                            Table = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReceiptDetail");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("5c51c26e-da45-4fa1-8298-ef58ce4c1ba8"),
                            ProductId = new Guid("c9b3e98b-5612-4f26-a6b5-bd2d893e46e3"),
                            ProductPrice = 0m,
                            ProductQuantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("5c51c26e-da45-4fa1-8298-ef58ce4c1ba8"),
                            ProductId = new Guid("6f8b6c6e-7d78-4ab3-950d-a4f6ed87f35e"),
                            ProductPrice = 0m,
                            ProductQuantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.Property<Guid>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PayrateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalSalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalaryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("PayrateId");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            SalaryId = new Guid("cf44dcd4-1901-4e86-95b0-19a17686c21a"),
                            EmployeeId = new Guid("8a5f677e-d77d-4c1e-b044-44ca391a1979"),
                            IsDeleted = false,
                            PayrateId = new Guid("30b8d7b5-7dde-45a4-9060-7b064de7bddf"),
                            TotalSalary = 250000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithMany("CheckTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.HasOne("CoffeeShop.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("CoffeeShop.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.HasOne("CoffeeShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoffeeShop.Models.ProductImage", b =>
                {
                    b.HasOne("CoffeeShop.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.HasOne("CoffeeShop.Models.Customer", "Customer")
                        .WithOne("Receipt")
                        .HasForeignKey("CoffeeShop.Models.Receipt", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithMany("Receipts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.HasOne("CoffeeShop.Models.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.HasOne("CoffeeShop.Models.Employee", "Employee")
                        .WithOne("Salary")
                        .HasForeignKey("CoffeeShop.Models.Salary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.PayRate", "PayRate")
                        .WithMany("Salaries")
                        .HasForeignKey("PayrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayRate");
                });

            modelBuilder.Entity("CoffeeShop.Models.Account", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Models.Employee", b =>
                {
                    b.Navigation("CheckTimes");

                    b.Navigation("Receipts");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
