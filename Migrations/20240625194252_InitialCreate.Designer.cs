// <auto-generated />
using System;
using CoffeeShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.Migrations
{
    [DbContext(typeof(CoffeeShopDBContext))]
    [Migration("20240625194252_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("b34b4d69-a99e-446c-a023-f2395e4b5084"),
                            CategoryName = "Coffee",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = new Guid("48252c2b-85c1-41fc-a53a-0823d05e4d9a"),
                            CategoryName = "Tea",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = new Guid("1ab2fb68-0f7e-40a4-959a-4fc031ba78dc"),
                            CategoryName = "Pastry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckTimes");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CustomerBirthday")
                        .HasMaxLength(255)
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("0ec3030b-556c-462b-80b4-6ceaf841ae6f"),
                            CustomerBirthday = new DateTime(2024, 6, 26, 2, 42, 50, 585, DateTimeKind.Local).AddTicks(4139),
                            CustomerName = "Jane Smith",
                            CustomerPhone = "0934516636",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Property<Guid>("PayRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PayrateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PayrateValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayRateId");

                    b.ToTable("PayRates");

                    b.HasData(
                        new
                        {
                            PayRateId = new Guid("1f37aa86-4f0a-4381-a8e2-b132188c1cb5"),
                            IsDeleted = false,
                            PayrateName = "Hoc viec",
                            PayrateValue = 20000m
                        },
                        new
                        {
                            PayRateId = new Guid("bd75ea48-cd13-45c4-9122-ff6a0a35a40b"),
                            IsDeleted = false,
                            PayrateName = "Junior",
                            PayrateValue = 25000m
                        },
                        new
                        {
                            PayRateId = new Guid("c8d0624d-d234-4a15-b895-5123949d6258"),
                            IsDeleted = false,
                            PayrateName = "Senior",
                            PayrateValue = 30000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("ba4bbea4-e343-4dd2-8df3-530355f6cf20"),
                            CategoryId = new Guid("b34b4d69-a99e-446c-a023-f2395e4b5084"),
                            ImageUrl = "",
                            IsDeleted = false,
                            ProductDescription = "Coffee shot",
                            ProductName = "Espresso",
                            ProductPrice = 25000m
                        },
                        new
                        {
                            ProductId = new Guid("5c2fb199-bb90-4d12-a71c-6d7624b63413"),
                            CategoryId = new Guid("b34b4d69-a99e-446c-a023-f2395e4b5084"),
                            ImageUrl = "",
                            IsDeleted = false,
                            ProductDescription = "Milky coffee",
                            ProductName = "Cappuccino",
                            ProductPrice = 30000m
                        },
                        new
                        {
                            ProductId = new Guid("0611210e-8678-41a1-ab10-71599db5e6f7"),
                            CategoryId = new Guid("48252c2b-85c1-41fc-a53a-0823d05e4d9a"),
                            ImageUrl = "",
                            IsDeleted = false,
                            ProductDescription = "Green thing",
                            ProductName = "Green Tea",
                            ProductPrice = 15000m
                        },
                        new
                        {
                            ProductId = new Guid("56da2756-a0a7-40eb-bb64-95551324a52c"),
                            CategoryId = new Guid("1ab2fb68-0f7e-40a4-959a-4fc031ba78dc"),
                            ImageUrl = "",
                            IsDeleted = false,
                            ProductDescription = "It's pronounced \"KhoaSoong\" ",
                            ProductName = "Croissant",
                            ProductPrice = 20000m
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReceiptTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Table")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("0f45d45a-9d42-4fc7-8db0-ea0cfd1cd1f7"),
                            CustomerId = new Guid("0ec3030b-556c-462b-80b4-6ceaf841ae6f"),
                            IsDeleted = false,
                            ReceiptDate = new DateTime(2024, 6, 26, 2, 42, 50, 585, DateTimeKind.Local).AddTicks(4168),
                            ReceiptTotal = 70000m,
                            Table = 1,
                            UserId = new Guid("6cdad382-f4f9-44d7-9d85-87edad1f6ef0")
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReceiptDetail");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("0f45d45a-9d42-4fc7-8db0-ea0cfd1cd1f7"),
                            ProductId = new Guid("ba4bbea4-e343-4dd2-8df3-530355f6cf20"),
                            ProductPrice = 0m,
                            ProductQuantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("0f45d45a-9d42-4fc7-8db0-ea0cfd1cd1f7"),
                            ProductId = new Guid("56da2756-a0a7-40eb-bb64-95551324a52c"),
                            ProductPrice = 0m,
                            ProductQuantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.Property<Guid>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PayrateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalaryId");

                    b.HasIndex("PayrateId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            SalaryId = new Guid("774a58bc-191e-442f-adaa-0355f7901197"),
                            IsDeleted = false,
                            PayrateId = new Guid("1f37aa86-4f0a-4381-a8e2-b132188c1cb5"),
                            TotalSalary = 250000m,
                            UserId = new Guid("6cdad382-f4f9-44d7-9d85-87edad1f6ef0")
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HashPassword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("UserWorkingHour")
                        .HasColumnType("tinyint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6cdad382-f4f9-44d7-9d85-87edad1f6ef0"),
                            IsDeleted = false,
                            Role = 0,
                            Username = "test"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Models.CheckTime", b =>
                {
                    b.HasOne("CoffeeShop.Models.User", "User")
                        .WithMany("CheckTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.HasOne("CoffeeShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.HasOne("CoffeeShop.Models.Customer", "Customer")
                        .WithOne("Receipt")
                        .HasForeignKey("CoffeeShop.Models.Receipt", "CustomerId");

                    b.HasOne("CoffeeShop.Models.User", "User")
                        .WithMany("Receipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShop.Models.ReceiptDetail", b =>
                {
                    b.HasOne("CoffeeShop.Models.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("CoffeeShop.Models.Salary", b =>
                {
                    b.HasOne("CoffeeShop.Models.PayRate", "PayRate")
                        .WithMany("Salaries")
                        .HasForeignKey("PayrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Models.User", "User")
                        .WithOne("Salary")
                        .HasForeignKey("CoffeeShop.Models.Salary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayRate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CoffeeShop.Models.Customer", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Models.PayRate", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("CoffeeShop.Models.Product", b =>
                {
                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("CoffeeShop.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("CoffeeShop.Models.User", b =>
                {
                    b.Navigation("CheckTimes");

                    b.Navigation("Receipts");

                    b.Navigation("Salary");
                });
#pragma warning restore 612, 618
        }
    }
}
